{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DeploymentBucket": {
      "Type": "String",
      "Description": "S3 bucket name where built artifacts are deployed"
    },
    "ProjectVersion": {
      "Type": "String",
      "Description": "Project Version"
    },
    "DeploymentTime": {
      "Type": "String",
      "Description": "It is a timestamp value which shows the deployment time. Used to rotate sources."
    },
    "DomainName": {
      "Type": "String",
      "Description": "Domain Name to serve the application"
    }
  },
  "Resources": {
    "DeploymentLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:PublishVersion",
                    "apigateway:POST"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DeploymentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Role": {
          "Fn::GetAtt": [
            "DeploymentLambdaRole",
            "Arn"
          ]
        },
        "Handler": "serverless.handler",
        "Runtime": "nodejs4.3",
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "serverless-arch-${AWS::Region}"
          },
          "S3Key": "serverless.zip"
        }
      }
    },
    "ApiGatewayCloudwatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        ]
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudwatchRole",
            "Arn"
          ]
        }
      }
    },
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ]
      }
    },
    "LambdaCustomPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaCustomPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBuckets"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ]
      }
    },
    "TestLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "com.serverlessbook.lambda.test.Handler",
        "Runtime": "java8",
        "Timeout": "300",
        "MemorySize": "1024",
        "Description": "Test lambda",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucket"
          },
          "S3Key": {
            "Fn::Sub": "artifacts/lambda-test/${ProjectVersion}/${DeploymentTime}.jar"
          }
        }
      }
    },
    "TestResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "PathPart": "test",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        }
      }
    },
    "TestGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "TestResource"
        },
        "AuthorizationType": "NONE",
        "RequestParameters": {
          "method.request.querystring.value": "True",
          "method.request.header.Accept": "True"
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestLambda.Arn}/invocations"
          },
          "IntegrationHttpMethod": "POST",
          "RequestParameters": {
            "integration.request.querystring.value": "method.request.querystring.value",
            "integration.request.header.Accept": "method.request.header.Accept"
          },
          "RequestTemplates": {
            "application/json": "{\"value\":\"$input.params('value')\"}"
          },
          "PassthroughBehavior": "NEVER",
          "IntegrationResponses": [
            {
              "SelectionPattern": ".*",
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "TestLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "TestLambda"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"
        }
      }
    },
    "ApiDeployment": {
      "DependsOn": [
        "TestGetMethod"
      ],
      "Type": "Custom::ApiDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "DeploymentLambda",
            "Arn"
          ]
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "StageName": "production",
        "DeploymentTime": {
          "Ref": "DeploymentTime"
        }
      }
    },
    "CloudformationDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            {
              "Ref": "DomainName"
            }
          ],
          "ViewerCertificate": {
            "SslSupportMethod": "sni-only",
            "AcmCertificateArn": {
              "Ref": "SSLCertificate"
            }
          },
          "Enabled": "true",
          "HttpVersion": "http2",
          "Origins": [
            {
              "DomainName": {
                "Fn::Sub": "${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
              },
              "OriginPath": "/production",
              "Id": "APIGATEWAY",
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only"
              }
            }
          ],
          "DefaultCacheBehavior": {
            "TargetOriginId": "APIGATEWAY",
            "Compress": true,
            "AllowedMethods": [
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ],
            "ForwardedValues": {
              "QueryString": "true",
              "Cookies": {
                "Forward": "none"
              },
              "Headers": [
                "Accept",
                "Content-Type",
                "Authorization"
              ]
            },
            "DefaultTTL": 0,
            "MaxTTL": 0,
            "MinTTL": 0,
            "ViewerProtocolPolicy": "redirect-to-https"
          }
        }
      }
    },
    "Route53HostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "Serverless Book Project Hosted Zone"
        },
        "Name": {
          "Ref": "DomainName"
        }
      }
    },
    "DNSRecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": {
          "Ref": "Route53HostedZone"
        },
        "RecordSets": [
          {
            "Name": {
              "Ref": "DomainName"
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": "Z2FDTNDATAQYW2",
              "DNSName": {
                "Fn::GetAtt": [
                  "CloudformationDistribution",
                  "DomainName"
                ]
              }
            }
          }
        ]
      }
    },
    "SSLCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "DomainName"
            },
            "ValidationDomain": "merkurapp.com"
          }
        ]
      }
    }
  }
}