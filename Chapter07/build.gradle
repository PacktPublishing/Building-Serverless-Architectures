task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

// allprojects means this configuration
// will be inherited by the root project itself and subprojects
allprojects {
    // Artifact Id of the projct
    group 'com.serverlessbook'
    // Version of the project
    version '1.0'
    // Gradle JAVA plugin needed for JAVA support
    apply plugin: 'java'
    // We will be using JAVA 8, then 1.8
    sourceCompatibility = 1.8
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://jitpack.io"
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://jitpack.io"
        }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.31"
    }
}

allprojects {
    apply plugin: "jp.classmethod.aws"
    aws {
        region = "us-east-1"
    }
}

allprojects {
    dependencies {

        compileOnly group: 'javax.inject', name: 'javax.inject', version: '1'

        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.easymock', 'name': 'easymock', 'version': '3.4'
        testCompile group: 'org.powermock', name: 'powermock-easymock-release-full', version: '1.6.+'
    }
}

def deploymentBucketName = "serverless-book-${aws.region}"
def deploymentTime = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

allprojects {
    apply plugin: "jp.classmethod.aws.s3"
    task createDeploymentBucket(type: jp.classmethod.aws.gradle.s3.CreateBucketTask) {
        bucketName deploymentBucketName
        ifNotExists true
    }
}

configure(subprojects.findAll { it.name.startsWith("lambda-") }) {
    dependencies {
        compile project(':lambda')
    }
    apply plugin: "com.github.johnrengelman.shadow"
    build.finalizedBy shadowJar

    def producedJarFilePath = it.tasks.shadowJar.archivePath
    def s3Key = "artifacts/${it.name}/${it.version}/${deploymentTime}.jar"

    task uploadArtifactsToS3(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask,
            dependsOn: [build, createDeploymentBucket]) {
        bucketName deploymentBucketName
        file producedJarFilePath
        key s3Key
    }
}

apply plugin: "jp.classmethod.aws.cloudformation"

cloudFormation {
    capabilityIam true
    templateFile project.file('cloudformation.template')
    templateBucket deploymentBucketName
    templateKeyPrefix "cfn-templates"
    stackName "serverlessbook"
    conventionMapping.stackParams = {
        return [
                DeploymentBucket: deploymentBucketName,
                ProjectVersion  : project.version,
                DeploymentTime  : deploymentTime,
                DomainName      : "serverlessbook.merkurapp.com",
                CloudSearchDomain: "serverlessbook-uiyqpdvcdz7o4hxudtnqzpjdtu"
        ]
    }
}

awsCfnMigrateStack.dependsOn awsCfnUploadTemplate

task deploy {
    configure(subprojects.findAll { it.name.startsWith("lambda-") }) {
        dependsOn it.uploadArtifactsToS3
    }
    finalizedBy awsCfnMigrateStackAndWaitCompleted
}

ext {
    guiceVersion = '4.1.+'
    awsSdkVersion = '1.11.+'
}

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain
import com.amazonaws.regions.Region
import com.amazonaws.regions.Regions
import com.amazonaws.services.cloudformation.AmazonCloudFormationClient
import com.amazonaws.services.cloudformation.model.DescribeStackResourcesRequest


def getDynamoDbTableNamesFromCloudformationStack(stackName) {
        return Region.getRegion(Regions.fromName(aws.region))
                .createClient(AmazonCloudFormationClient.class, new DefaultAWSCredentialsProviderChain(), null)
                .describeStackResources(new DescribeStackResourcesRequest().withStackName(stackName))
                .getStackResources().findAll { stackResource -> stackResource.getResourceType() == "AWS::DynamoDB::Table" }
}

subprojects {
    test {
        getDynamoDbTableNamesFromCloudformationStack(cloudFormation.stackName).each {
            environment 'DynamoDb' + it.getLogicalResourceId(), it.getPhysicalResourceId()
        }
    }
}